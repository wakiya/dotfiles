;;-*-coding: utf-8;-*-
(define-abbrev-table 'Buffer-menu-mode-abbrev-table '())

(define-abbrev-table 'awk-mode-abbrev-table
  '(
   ))

(define-abbrev-table 'bookmark-bmenu-mode-abbrev-table '())

(define-abbrev-table 'c++-mode-abbrev-table
  '(
   ))

(define-abbrev-table 'c-mode-abbrev-table
  '(
   ))

(define-abbrev-table 'comint-mode-abbrev-table '())

(define-abbrev-table 'completion-list-mode-abbrev-table '())

(define-abbrev-table 'conf-colon-mode-abbrev-table '())

(define-abbrev-table 'conf-javaprop-mode-abbrev-table '())

(define-abbrev-table 'conf-ppd-mode-abbrev-table '())

(define-abbrev-table 'conf-space-mode-abbrev-table '())

(define-abbrev-table 'conf-unix-mode-abbrev-table '())

(define-abbrev-table 'conf-windows-mode-abbrev-table '())

(define-abbrev-table 'conf-xdefaults-mode-abbrev-table '())

(define-abbrev-table 'csharp-mode-abbrev-table '())

(define-abbrev-table 'emacs-lisp-byte-code-mode-abbrev-table '())

(define-abbrev-table 'emacs-lisp-mode-abbrev-table '())

(define-abbrev-table 'eshell-mode-abbrev-table '())

(define-abbrev-table 'fundamental-mode-abbrev-table '())

(define-abbrev-table 'global-abbrev-table '())

(define-abbrev-table 'grep-mode-abbrev-table '())

(define-abbrev-table 'help-mode-abbrev-table '())

(define-abbrev-table 'html-mode-abbrev-table '())

(define-abbrev-table 'idl-mode-abbrev-table '())

(define-abbrev-table 'inferior-emacs-lisp-mode-abbrev-table '())

(define-abbrev-table 'internal-ange-ftp-mode-abbrev-table '())

(define-abbrev-table 'java-mode-abbrev-table
  '(
   ))

(define-abbrev-table 'js-mode-abbrev-table '())

(define-abbrev-table 'lisp-mode-abbrev-table '())

(define-abbrev-table 'objc-mode-abbrev-table
  '(
   ))

(define-abbrev-table 'occur-edit-mode-abbrev-table '())

(define-abbrev-table 'occur-mode-abbrev-table '())

(define-abbrev-table 'outline-mode-abbrev-table '())

(define-abbrev-table 'package-menu-mode-abbrev-table '())

(define-abbrev-table 'php-mode-abbrev-table
  '(
    ("ar" "array()" nil 6)
    ("arr" "array(''=>'',)" nil 3)
    ("emp" "empty($)" nil 3)
    ("empn" "!empty($)" nil 1)
    ("fo" "for ($i = 0; $i < $cnt; $i++) {

}" nil 1)
    ("foe" "foreach ($ar as $v) {

}" nil 4)
    ("foekv" "foreach ($ar as $k => $v) {

}" nil 0)
    ("ife" "if () {

} else {

}" nil 6)
    ("ifes" "if () {

} elseif () {

}" nil 1)
    ("ifese" "if () {

} elseif () {

} else {

}" nil 1)
    ("ifo" "if () {

}" nil 4)
    ("pr" "print_r($);" nil 17)
    ("ret" "return;" nil 9)
    ("sta" "static::" nil 2)
    ("sw" "switch ($) {
    case '0':
        ;
        break;
    case '1':
        ;
        break;
    default:
       ;
}" nil 2)
    ("tryf" "try {
    
} catch (Exception $e) {
    print_r($e->getMessage());
} finally {
    ;
}" nil 0)
    ("tryn" "try {
    
} catch (Exception $e) {
    print_r($e->getMessage());
}" nil 2)
   ))

(define-abbrev-table 'pike-mode-abbrev-table
  '(
   ))

(define-abbrev-table 'process-menu-mode-abbrev-table '())

(define-abbrev-table 'prog-mode-abbrev-table '())

(define-abbrev-table 'reb-lisp-mode-abbrev-table '())

(define-abbrev-table 'reb-mode-abbrev-table '())

(define-abbrev-table 'select-tags-table-mode-abbrev-table '())

(define-abbrev-table 'sgml-mode-abbrev-table '())

(define-abbrev-table 'shell-mode-abbrev-table '())

(define-abbrev-table 'special-mode-abbrev-table '())

(define-abbrev-table 'speedbar-mode-abbrev-table '())

(define-abbrev-table 'sql-mode-abbrev-table
  '(
    ("a" "AND " nil 14)
    ("as" "AS " nil 8)
    ("co" "COALESCE(, '') " nil 2)
    ("cr" "CREATE " nil 0)
    ("d" "DISTINCT " nil 1)
    ("del" "DELETE " nil 0)
    ("ex" "EXPLAIN " nil 4)
    ("f" "FROM " nil 4)
    ("func" "FUNCTION " nil 0)
    ("g" "GROUP BY " nil 3)
    ("h" "HAVING " nil 0)
    ("i" "INSERT " nil 0)
    ("in" "INNER JOIN ON " nil 0)
    ("ins" "INSERT " nil 0)
    ("isn" "IS NULL " nil 0)
    ("isnn" "IS NOT NULL " nil 1)
    ("l" "LEFT JOIN ON " nil 1)
    ("lim" "LIMIT 0 " nil 0)
    ("o" "ORDER BY " nil 3)
    ("or" "OR " nil 0)
    ("proc" "PROCEDURE " nil 0)
    ("s" "SELECT " nil 7)
    ("sf" "SELECT *
FROM " nil 2)
    ("u" "UPDATE table SET field = '' WHERE " nil 0)
    ("uni" "UNION" nil 1)
    ("upd" "UPDATE " nil 0)
    ("w" "WHERE " nil 3)
   ))

(define-abbrev-table 'tabulated-list-mode-abbrev-table '())

(define-abbrev-table 'term-mode-abbrev-table '())

(define-abbrev-table 'text-mode-abbrev-table '())

(define-abbrev-table 'vc-git-log-edit-mode-abbrev-table '())

(define-abbrev-table 'vc-git-log-view-mode-abbrev-table '())

